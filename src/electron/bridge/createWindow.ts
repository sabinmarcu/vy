import {
  BrowserWindow,
} from 'electron';
import {
  routes,
  BridgeActions,
} from '../../routes/index';
import {
  BridgeActionPackage,
  BridgeActionProps,
  CreateWindowAction,
  ExtractFromBridgeActions,
} from '../../types/index';
import {
  addWindow,
  removeWindow,
} from '../utils/windows';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

type CustomCreateWindowAction = ExtractFromBridgeActions<
  BridgeActions,
  CreateWindowAction['type']
>;

type CreateWindowProps = BridgeActionProps<CustomCreateWindowAction>;

export const createWindow = (
  // @ts-ignore
  { path = '/' }: CreateWindowProps = {} as any,
): void => {
  const route = routes[path];

  if (!path) {
    return undefined;
  }

  const { window: windowParams } = route;
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    // @ts-ignore
    ...windowParams,
    title: 'Electron Forge',
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(`${MAIN_WINDOW_WEBPACK_ENTRY}/#${path}`);

  addWindow(mainWindow, route);

  mainWindow.on('close', () => {
    removeWindow(mainWindow);
  });

  return undefined;
};

export const createWindowPackage: BridgeActionPackage<CustomCreateWindowAction> = {
  // @ts-ignore
  type: 'createWindow',
  handler: createWindow,
};
